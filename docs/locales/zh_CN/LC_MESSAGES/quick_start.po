# SOME DESCRIPTIVE TITLE.
# Copyright (C) MindSpore and CQU NLP Team
# This file is distributed under the same license as the MindNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: MindNLP\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-28 17:42+0800\n"
"PO-Revision-Date: 2022-12-28 17:46+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../quick_start/dataset_and_transforms.rst:2
msgid "Dataset and transforms"
msgstr "数据集和数据变换"

#: ../../quick_start/first_model.rst:2
msgid "First Model"
msgstr "第一个模型"

#: ../../quick_start/first_model.rst:5
msgid "Overview"
msgstr "概述"

#: ../../quick_start/first_model.rst:7
msgid ""
"Sentiment classification is a classic task in natural language processing. "
"It is a typical classification problem to mine and analyze people's "
"sentiments expressed in the text, which is positive or negative. The "
"following uses MindNLP to implement an RNN-based sentimental classification "
"model to achieve the following effects:"
msgstr ""
"情感分类是自然语言处理中的经典任务，目标在于对给定文本中的情感色彩进行挖掘、"
"分析，是典型的分类问题。本节使用MindNLP实现一个基于RNN网络的情感分类模型，实"
"现如下的效果："

#: ../../quick_start/first_model.rst:24
msgid "Model Building"
msgstr "模型构建"

#: ../../quick_start/first_model.rst:26
msgid ""
"According to the task, the base module :py:class:`~mindnlp.abc.Seq2vecModel` "
"can be used to build the model. The function of module :py:class:`~mindnlp."
"abc.Seq2vecModel` is to extract semantic feature of the input sequential and "
"calculate to the result vector. It consists of two modules, ``encoder`` and "
"``head``, where ``encoder`` mapping the input sentence into semantic vector "
"and ``head`` performing further calculation on ``encoder`` output to get the "
"final result."
msgstr ""
"根据任务的模型架构，使用 :py:class:`~mindnlp.abc.Seq2vecModel` 进行模型构建。"
"模块 :py:class:`~mindnlp.abc.Seq2vecModel` 的功能是提取输入序列数据的语义特征"
"并计算得到结果向量。这一模块由 ``encoder`` 和 ``head`` 两部分组成，其中 "
"``encoder`` 将输入句子映射为语义向量，而 ``head`` 对 ``encoder`` 的输出进行进"
"一步计算得到最终的结果。"

#: ../../quick_start/first_model.rst:53
msgid "Model Instantiation"
msgstr "模型实例化"

#: ../../quick_start/first_model.rst:55
msgid ""
"Two modules ``encoder`` and ``head`` are initialized separately, passing as "
"arguments into model. We use :py:class:`~mindnlp.modules.RNNEncoder` "
"provided by MindNLP as the model's ``encoder``, and use customized modules "
"as the model's ``head``."
msgstr ""
"分别将 ``encoder`` 和 ``head`` 两个模块分别初始化，并作为参数传入模型。我们使"
"用MindNLP提供的 :py:class:`~mindnlp.modules.RNNEncoder` 作为模型的 "
"``encoder`` ，并使用自定义的模块作为模型的 ``head`` 。"

#: ../../quick_start/modules.rst:2
msgid "Modules"
msgstr "组件"

#: ../../quick_start/modules.rst:4
msgid ""
":py:class:`~mindnlp.modules` is used to build neural network models, which "
"can be used with `MindSpore`. :py:class:`~mindnlp.modules` can be classified "
"into three functional modules: `Embedding`, `Encoder-Decoder` and "
"`Attention`. We will introduce the three function in the following three "
"sections."
msgstr ""
":py:class:`~mindnlp.modules` 用于构建神经网络模型，可以和 `MindSpore` 一起使用。 "
":py:class:`~mindnlp.modules` 具有三大功能模块：`Embedding`, `Encoder-Decoder` "
"和 `Attention` 。下面我们会分三节分别介绍这三大功能。"

#: ../../quick_start/modules.rst:10
msgid "Embedding"
msgstr ""

#: ../../quick_start/modules.rst:12
msgid ""
"embedding is essentially a word embedding technique, which can represent a "
"character or word as a low-dimensional vector. mindnlp provides a quick and "
"easy way to construct embeddings through pre-trained glove,fasttext,word2vec "
"word vectors. You can also create your own custom embeddings."
msgstr ""
"embedding本质上是一种词嵌入技术,能够将一个单词或短语表示为低维向量."
"mindnlp提供了一个快速通过预训练glove,fasttext,word2vec词向量简单构造embedding的方法."
"你也可以创建自己的embedding."

#: ../../quick_start/modules.rst:18
msgid ""
"Next we demonstrate how to quickly construct an embedding using glove word "
"vectors via MindNLP."
msgstr "下面将演示如何使用glove预训练词向量来通过MindNLP快速构造embedding."

#: ../../quick_start/modules.rst:40
msgid "After creating the embedding, we will use it for lookup next:"
msgstr "在创建embedding后,我们将使用它进行lookup:"

#: ../../quick_start/modules.rst:50
msgid ""
"You can get more information about the embedding API from :doc:`MindNLP."
"modules.embeddings <../api/modules/embeddings>`."
msgstr "你可以从 :doc:`MindNLP."
"modules.embeddings <../api/modules/embeddings>`."
"得到更多有关embedding API的信息."

#: ../../quick_start/modules.rst:54
msgid "Encoder-Decoder"
msgstr ""

#: ../../quick_start/modules.rst:56
msgid ""
"Encoder-Decoder is a model framework, which is a general term for a class of "
"algorithms. Various algorithms can be used in this framework to solve "
"different tasks. Encoder converts the input sequence into a sentiment "
"vector, and decoder generates the target translation based on the output of "
"the encoder."
msgstr ""
"Encoder-Decoder是一个模型架构，是一类算法统称。在这个框架下可以使用不同的算法"
"来解决不同的人物。Encoder将输入序列转化为语义向量，Decoder根据Encoder的输出"
"生成目标译文。"

#: ../../quick_start/modules.rst:61
msgid ""
"We can use encoder and decoder provided by MindNLP to construct model as the "
"following example of a machine translation model. More information about "
"this model are shown in :doc:`Machine Translation Example <../examples/"
"machine_translation>` ."
msgstr ""
"我们可以使用MindNLP中提供的的Encoder、Decoder模块来构建网络，如下面机器翻译模型的"
"示例所示。关于此模型的更多信息可查看 :doc:`机器翻译 <../examples/machine_translation>` 。"

#: ../../quick_start/modules.rst:112
msgid ""
"The Encoder-Decoder modules included in MindNLP are shown in the following "
"table. You can click on the name to see the detailed API, or learn about "
"them through :doc:`MindNLP.modules.encoder <../api/modules/encoder>` and :"
"doc:`MindNLP.modules.decoder <../api/modules/decoder>` ."
msgstr ""
"MindNLP中包含的Encoder-Decoder模块如下表所示。您可以点击具体的名称查看详细的API，"
"也可以通过 :doc:`MindNLP.modules.encoder <../api/modules/encoder>` 和 "
":doc:`MindNLP.modules.decoder <../api/modules/decoder>` 进行了解。"

#: ../../quick_start/modules.rst:118
msgid "Name"
msgstr "名称"

#: ../../quick_start/modules.rst:118
msgid "Introduction"
msgstr "介绍"

#: ../../quick_start/modules.rst:120
msgid ":py:class:`~mindnlp.modules.encoder.cnn_encoder.CNNEncoder`"
msgstr ""

#: ../../quick_start/modules.rst:120
msgid "Convolutional encoder consisting of len(convolutions) layers"
msgstr "由传入参数convolutions组成的卷积编码器"

#: ../../quick_start/modules.rst:124
msgid ":py:class:`~mindnlp.modules.encoder.rnn_encoder.RNNEncoder`"
msgstr ""

#: ../../quick_start/modules.rst:124
msgid "Stacked Elman RNN Encoder"
msgstr "循环神经网络（RNN）编码器"

#: ../../quick_start/modules.rst:126
msgid ":py:class:`~mindnlp.modules.decoder.rnn_decoder.RNNDecoder`"
msgstr ""

#: ../../quick_start/modules.rst:126
msgid "Stacked Elman RNN Decoder"
msgstr "循环神经网络（RNN）解码器"

#: ../../quick_start/modules.rst:130
msgid "Attention"
msgstr ""

#: ../../quick_start/train_and_eval.rst:2
msgid "Train and Eval"
msgstr "训练与评估"

#: ../../quick_start/train_and_eval.rst:4
msgid ""
"We use the task of sentiment analysis to give a detailed introduction. And "
"we employ :py:class:`~mindnlp.engine.trainer.Trainer` for a fast training "
"and evaluation."
msgstr ""
"我们根据情感分析任务来进行详细的介绍，使用 :py:class:`~mindnlp.engine."
"trainer.Trainer` 来进行快速训练和评估。"

#: ../../quick_start/train_and_eval.rst:10
msgid "Load and Process Data"
msgstr "加载和处理数据"

#: ../../quick_start/train_and_eval.rst:13
msgid "Load Data"
msgstr "加载数据"

#: ../../quick_start/train_and_eval.rst:15
msgid ""
"We can call the function ``load()`` from :py:class:`~mindnlp.dataset` to "
"load the IMDB dataset. And then the method will return the training set and "
"the testing set of the IMDB dataset."
msgstr ""
"我们可以调用来自 :py:class:`~mindnlp.dataset` 模块的函数 ``load()`` 来加载"
"IMDB数据集。该函数会返回IMDB数据集的训练集和测试集。"

#: ../../quick_start/train_and_eval.rst:19
msgid "The code of loading data is as follows:"
msgstr "加载数据的代码如下所示："

#: ../../quick_start/train_and_eval.rst:28
msgid "Process and Split Data"
msgstr "处理和划分数据"

#: ../../quick_start/train_and_eval.rst:30
msgid ""
"First we obtain the embeddings and the vocabulary, by calling the function "
"``from_pretrained()`` from :py:class:`~mindnlp.modules.embeddings."
"glove_embedding.Glove`:"
msgstr ""
"首先我们通过调用来自 :py:class:`~mindnlp.modules.embeddings.glove_embedding."
"Glove` 的函数 ``from_pretrained()`` ，获取嵌入和词汇表："

#: ../../quick_start/train_and_eval.rst:40
msgid ""
"And then we initialize the tokenizer by instantiating the class :py:class:"
"`~mindnlp.dataset.transforms.tokenizers.BasicTokenizer`:"
msgstr ""
"然后我们通过实例化类 :py:class:`~mindnlp.dataset.transforms.tokenizers."
"BasicTokenizer` 来初始化分词器："

#: ../../quick_start/train_and_eval.rst:49
msgid ""
"Next, we apply the method ``process()`` to get the processed training set, "
"by passing the obtained training set, tokenizer, vocabulary and so on into "
"this method:"
msgstr ""
"接着，我们将获取到的训练集、分词器和词汇表等传入方法 ``process()`` ，应用该方"
"法获取处理过的训练集："

#: ../../quick_start/train_and_eval.rst:60
msgid ""
"Finally, we employ the method ``split()`` to split the processed training "
"set, thus getting a new training set and a validation set:"
msgstr ""
"最后，我们使用方法 ``split()`` 来划分处理后的训练集，从而获取新的训练集和验证"
"集："

#: ../../quick_start/train_and_eval.rst:68
msgid "Define and Train Model"
msgstr "定义和训练模型"

#: ../../quick_start/train_and_eval.rst:71
msgid "Define and Initialize Network"
msgstr "定义和初始化网络"

#: ../../quick_start/train_and_eval.rst:73
msgid ""
"We introduce the pre-defined network layers from MindSpore and MindNLP to "
"construct our network."
msgstr "我们引入了MindSpore和MindNLP预定义好的网络层来构建我们的网络。"

#: ../../quick_start/train_and_eval.rst:76
msgid ""
"Use ``mindspore.nn.LSTM``, ``mindspore.nn.Dense``, ``mindspore.nn.Sigmoid``, "
"``mindspore.nn.Dropout`` of MindSpore, and :py:class:`~mindnlp.abc."
"Seq2vecModel`, :py:class:`~mindnlp.modules.encoder.rnn_encoder.RNNEncoder` "
"of MindNLP to construct our model. And apply ``mindspore.common.initializer."
"Uniform`` and ``mindspore.common.initializer.HeUniform`` of MindSpore to "
"initialize the weight and bias of the network we construct."
msgstr ""
"使用MindSpore的 ``mindspore.nn.LSTM`` ， ``mindspore.nn.Dense`` ， "
"``mindspore.nn.Sigmoid`` ， ``mindspore.nn.Dropout`` ，和MindNLP的 :py:class:"
"`~mindnlp.abc.Seq2vecModel`， :py:class:`~mindnlp.modules.encoder."
"rnn_encoder.RNNEncoder` 来构建我们的模型。并应用MindSpore的 ``mindspore."
"common.initializer.Uniform`` 和 ``mindspore.common.initializer.HeUniform`` 来"
"初始化我们构建的网络的权重和偏差。"

#: ../../quick_start/train_and_eval.rst:86
msgid "The code of defining and initializing the network is as follows:"
msgstr "定义和初始化网络的代码如下所示："

#: ../../quick_start/train_and_eval.rst:144
msgid "Define Loss Function and Optimizer"
msgstr "定义损失函数和优化器"

#: ../../quick_start/train_and_eval.rst:146
msgid ""
"A loss function is needed when we train the model. We use ``mindspore.nn."
"BCELoss`` provided by MindSpore to define a loss function:"
msgstr ""
"我们训练模型时需要损失函数，我们使用MindSpore提供的 ``mindspore.nn.BCELoss`` "
"来定义一个损失函数："

#: ../../quick_start/train_and_eval.rst:154
msgid ""
"After that, define the optimizer required for running the model by calling "
"``mindspore.nn.Adam`` and passing the trainable parameters of the model into "
"it:"
msgstr ""
"然后，调用 ``mindspore.nn.Adam`` ，并传入模型的可训练参数，从而定义运行模型所"
"需要的优化器："

#: ../../quick_start/train_and_eval.rst:163
msgid "Define Callbacks"
msgstr "定义回调函数"

#: ../../quick_start/train_and_eval.rst:165
msgid ""
"Defining callbacks plays an important role in training models with MindNLP. "
"It helps to add some extra operations to the training process."
msgstr ""
"借助MindNLP进行模型训练时，定义回调函数非常重要。它帮助在训练过程中添加一些额"
"外的操作。"

#: ../../quick_start/train_and_eval.rst:168
msgid ""
"For example, we can add :py:class:`~mindnlp.engine.callbacks."
"best_model_callback.BestModelCallback` for saving and loading the best "
"model. Or we can use :py:class:`~mindnlp.engine.callbacks."
"checkpoint_callback.CheckpointCallback` for saving the checkpoint. There are "
"also other callbacks for early stop and timing."
msgstr ""
"例如，我们可以添加 :py:class:`~mindnlp.engine.callbacks.best_model_callback."
"BestModelCallback` 用于保存和加载最好的模型。或者我们能够使用 :py:class:"
"`~mindnlp.engine.callbacks.checkpoint_callback.CheckpointCallback` 来保存"
"checkpoint。除此之外，还有能用于早停和计时的回调函数。"

#: ../../quick_start/train_and_eval.rst:175
msgid ""
"When customizing the callbacks we need, we could first initialize the "
"corresponding classes of callbacks, and then declare a callback list of the "
"callbacks we initialized before. Just like:"
msgstr ""
"当定义我们需要的回调函数时，我们首先需要初始化回调函数对应的类，然后声明一个"
"由我们事先初始化的回调函数组成的列表，正如："

#: ../../quick_start/train_and_eval.rst:192
msgid "Define Metrics"
msgstr "定义评价指标"

#: ../../quick_start/train_and_eval.rst:194
msgid ""
"It is necessary to evaluate the model using one or more metrics. We choose :"
"py:class:`~mindnlp.engine.metrics.accuracy.Accuracy` to be the metric of the "
"model:"
msgstr ""
"使用一个或多个评价指标来评估模型是有必要的。我们选择 :py:class:`~mindnlp."
"engine.metrics.accuracy.Accuracy` 作为模型的评价指标："

#: ../../quick_start/train_and_eval.rst:205
#, fuzzy
#| msgid "Train and Eval"
msgid "Train and Evaluate Model"
msgstr "训练与评估模型"

#: ../../quick_start/train_and_eval.rst:207
msgid ""
"After defining the network, the loss function, the optimizer, the callbacks "
"and the metrics, we employ :py:class:`~mindnlp.engine.trainer.Trainer` to "
"train and evaluate the model defined above."
msgstr ""
"定义好网络、损失函数、优化器、回调函数和评价指标后，我们应用 :py:class:"
"`~mindnlp.engine.trainer.Trainer` 来训练和评估前文定义好的模型。"

#: ../../quick_start/train_and_eval.rst:211
msgid ""
"More specifically, when we train the model, we should pass these parameters "
"into :py:class:`~mindnlp.engine.trainer.Trainer`:"
msgstr ""
"具体地说，当我们训练模型时，我们应该将这些参数传入 :py:class:`~mindnlp."
"engine.trainer.Trainer` ："

#: ../../quick_start/train_and_eval.rst:214
msgid "``network``: the network to be trained."
msgstr "``network``：训练的网络。"

#: ../../quick_start/train_and_eval.rst:215
msgid "``train_dataset``: the dataset for training the model."
msgstr "``train_dataset``：用于训练模型的数据集。"

#: ../../quick_start/train_and_eval.rst:216
msgid "``eval_dataset``: the dataset for evaluating the model."
msgstr "``eval_dataset``：用于评估模型的数据集。"

#: ../../quick_start/train_and_eval.rst:217
msgid "``metrics``: the metrics used for model evaluation."
msgstr "``metrics``：用于评估模型的评价指标。"

#: ../../quick_start/train_and_eval.rst:218
msgid "``epochs``: the total number of training iterations."
msgstr "``epochs``：训练数据的总迭代次数。"

#: ../../quick_start/train_and_eval.rst:219
msgid "``loss_fn``: the loss function."
msgstr "``loss_fn``：损失函数。"

#: ../../quick_start/train_and_eval.rst:220
msgid "``optimizer``: the optimizer for updating the trainable parameters."
msgstr "``optimizer``：用于更新训练参数的优化器。"

#: ../../quick_start/train_and_eval.rst:221
msgid "``callbacks``: the additional operations executed when training."
msgstr "``callbacks``：训练时执行的额外操作。"

#: ../../quick_start/train_and_eval.rst:223
msgid "The example code of training and evaluating the model is as follows:"
msgstr "训练和评估模型的示例代码："

#: ../../quick_start/use_metrics.rst:2
msgid "Use Metrics"
msgstr "使用Metrics评估模型"

#: ../../quick_start/use_metrics.rst:4
msgid ""
"There are a variety of :py:class:`~mindnlp.abc.Metric` in MindNLP for model "
"evaluation: :py:class:`~mindnlp.engine.metrics.accuracy.Accuracy`, :py:class:"
"`~mindnlp.engine.metrics.bleu.BleuScore`, :py:class:`~mindnlp.engine.metrics."
"confusion_matrix.ConfusionMatrix`, :py:class:`~mindnlp.engine.metrics."
"distinct.Distinct`, :py:class:`~mindnlp.engine.metrics.em_score.EmScore`, :"
"py:class:`~mindnlp.engine.metrics.f1.F1Score`, :py:class:`~mindnlp.engine."
"metrics.matthews.MatthewsCorrelation`, :py:class:`~mindnlp.engine.metrics."
"pearson.PearsonCorrelation`, :py:class:`~mindnlp.engine.metrics.perplexity."
"Perplexity`, :py:class:`~mindnlp.engine.metrics.precision.Precision`, :py:"
"class:`~mindnlp.engine.metrics.recall.Recall`, :py:class:`~mindnlp.engine."
"metrics.rouge.RougeL`, :py:class:`~mindnlp.engine.metrics.rouge.RougeN`, :py:"
"class:`~mindnlp.engine.metrics.spearman.SpearmanCorrelation`."
msgstr ""
"MindNLP中有很多 :py:class:`~mindnlp.abc.Metric` 可以用于模型评估： :py:class:"
"`~mindnlp.engine.metrics.accuracy.Accuracy` ， :py:class:`~mindnlp.engine."
"metrics.bleu.BleuScore`， :py:class:`~mindnlp.engine.metrics."
"confusion_matrix.ConfusionMatrix`， :py:class:`~mindnlp.engine.metrics."
"distinct.Distinct`， :py:class:`~mindnlp.engine.metrics.em_score.EmScore`， :"
"py:class:`~mindnlp.engine.metrics.f1.F1Score`， :py:class:`~mindnlp.engine."
"metrics.matthews.MatthewsCorrelation`， :py:class:`~mindnlp.engine.metrics."
"pearson.PearsonCorrelation`， :py:class:`~mindnlp.engine.metrics.perplexity."
"Perplexity`， :py:class:`~mindnlp.engine.metrics.precision.Precision`， :py:"
"class:`~mindnlp.engine.metrics.recall.Recall`， :py:class:`~mindnlp.engine."
"metrics.rouge.RougeL`， :py:class:`~mindnlp.engine.metrics.rouge.RougeN`， :"
"py:class:`~mindnlp.engine.metrics.spearman.SpearmanCorrelation`。"

#: ../../quick_start/use_metrics.rst:22
msgid ""
"We can use these pre-defined metrics directly, by instantiating some of the "
"classes and passing the instantiated objects into :py:class:`~mindnlp.engine."
"trainer.Trainer` as one of its parameters."
msgstr ""
"我们可以直接使用这些预定义好的评价指标，通过实例化一些相关类，并将实例化后的"
"对象送入 :py:class:`~mindnlp.engine.trainer.Trainer` 作为其参数之一。"

#: ../../quick_start/use_metrics.rst:27
msgid ""
"Taking the use of :py:class:`~mindnlp.engine.metrics.accuracy.Accuracy` as "
"an example, the code of using metrics for model training and evaluation is "
"as follows:"
msgstr ""
"以 :py:class:`~mindnlp.engine.metrics.accuracy.Accuracy` 的使用为例，使用评价"
"指标，进行模型训练和评估的代码如下所示："

#: ../../quick_start/use_metrics.rst:47
msgid "Define a New Metric"
msgstr "定义新的评价指标"

#: ../../quick_start/use_metrics.rst:49
msgid ""
"If the metric we need is not provided by MindNLP, it is still simple and "
"easy for us to define our own metric."
msgstr ""
"如果MindNLP没有提供我们需要的评价指标，我们也可以轻松定义自己的评价指标。"

#: ../../quick_start/use_metrics.rst:52
msgid ""
"All of the classes of metrics defined in MindNLP are inherited from the base "
"class :py:class:`~mindnlp.abc.Metric`. When defining our own metric class, "
"it is also necessary to extend :py:class:`~mindnlp.abc.Metric` and rewrite "
"the functions of it:"
msgstr ""
"MindNLP定义的所有评价指标类都继承自基类 :py:class:`~mindnlp.abc.Metric` 。定"
"义我们自己的评价指标类时，也需要继承 :py:class:`~mindnlp.abc.Metric` ，并重写"
"该类的函数："

#: ../../quick_start/use_metrics.rst:59
msgid "``__init__()``: initializes the metric."
msgstr "``__init__()``：初始化评价指标。"

#: ../../quick_start/use_metrics.rst:60
msgid "``clear()``: clears the internal evaluation results."
msgstr "``clear()``：清空中间评估结果。"

#: ../../quick_start/use_metrics.rst:61
msgid "``eval()``: computes and returns the value of the metric."
msgstr "``eval()``：计算并返回评价指标值。"

#: ../../quick_start/use_metrics.rst:62
msgid "``update(*inputs)``: updates the local variables."
msgstr "``update(*inputs)``：更新局部变量。"

#: ../../quick_start/use_metrics.rst:63
msgid "``get_metric_name()``: returns the name of the metric."
msgstr "``get_metric_name()``：返回评价指标名称。"

#: ../../quick_start/use_metrics.rst:65
msgid ""
"After finishing those operations, the steps to train and evaluate models "
"using self-defined metrics are the same as mentioned above."
msgstr ""
"完成上述操作后，要使用自定义的评价指标来训练和评估模型，后续操作与前文一致。"

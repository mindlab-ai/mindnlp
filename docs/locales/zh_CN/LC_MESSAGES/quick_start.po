# SOME DESCRIPTIVE TITLE.
# Copyright (C) MindSpore and CQU NLP Team
# This file is distributed under the same license as the MindNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: MindNLP\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 20:33+0800\n"
"PO-Revision-Date: 2023-01-07 23:13+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../quick_start/dataset_and_transforms.rst:2
msgid "Dataset and transforms"
msgstr "数据集和数据变换"

#: ../../quick_start/dataset_and_transforms.rst:5
msgid "Dataset"
msgstr "数据集"

#: ../../quick_start/dataset_and_transforms.rst:7
msgid ""
"In mindnlp, there are download interfaces for some datasets, which can be "
"used to download datasets directly. Based on the following classifications, "
"the datasets currently included are:"
msgstr ""
"在mindnlp中，内置了一些数据集的调用接口，可以直接下载使用。按照以下分类，目前"
"包含的数据集有："

#: ../../quick_start/dataset_and_transforms.rst:11
msgid "Machine Translation"
msgstr "机器翻译"

#: ../../quick_start/dataset_and_transforms.rst:13
msgid "​\\ ``IWSLT2016``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:14
msgid "​\\ ``IWSLT2017``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:15
msgid "​\\ ``Multi30k``\\ ​​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:17
msgid "Question Answer"
msgstr "问答任务"

#: ../../quick_start/dataset_and_transforms.rst:19
msgid "​\\ ``SQuAD1``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:20
msgid "​\\ ``SQuAD2``\\ ​​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:22
msgid "Sequence Tagging"
msgstr "序列标注"

#: ../../quick_start/dataset_and_transforms.rst:24
msgid "​\\ ``CoNLL2000Chunking``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:25
msgid "​\\ ``UDPOS``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:27
msgid "Text Classification"
msgstr "文本分类"

#: ../../quick_start/dataset_and_transforms.rst:29
msgid "​\\ ``AG_NEWS``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:30
msgid "​\\ ``AmazonReviewFull``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:31
msgid "​\\ ``AmazonReviewPolarity``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:32
msgid "​\\ ``CoLA``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:33
msgid "​\\ ``DBpedia``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:34
msgid "​\\ ``IMDB``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:35
msgid "​\\ ``MNLI``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:36
msgid "​\\ ``MRPC``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:37
msgid "​\\ ``QNLI``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:38
msgid "​\\ ``QQP``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:39
msgid "​\\ ``RTE``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:40
msgid "​\\ ``SogouNews``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:41
msgid "​\\ ``SST2``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:42
msgid "​\\ ``STSB``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:43
msgid "​\\ ``WNLI``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:44
msgid "​\\ ``YahooAnswers``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:45
msgid "​\\ ``YelpReviewFull``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:46
msgid "​\\ ``YelpReviewPolarity``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:48
msgid "Text Generation"
msgstr "文本生成"

#: ../../quick_start/dataset_and_transforms.rst:50
msgid "​\\ ``LCSTS``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:51
msgid "​\\ ``PennTreebank``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:52
msgid "​\\ ``WikiText2``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:53
msgid "​\\ ``WikiText103``\\ ​"
msgstr ""

#: ../../quick_start/dataset_and_transforms.rst:56
msgid "Dataset Loading"
msgstr "数据集加载"

#: ../../quick_start/dataset_and_transforms.rst:58
msgid ""
"There are two ways to load a dataset. The first is to call the corresponding "
"interface, and the second is to call a unified interface."
msgstr ""
"加载数据集的方法有两种，第一种是通过对应接口调用，第二种则是通过一个统一的接"
"口进行调用。"

#: ../../quick_start/dataset_and_transforms.rst:62
msgid "Method 1: Load by corresponding interface"
msgstr "方法1：通过对应接口加载"

#: ../../quick_start/dataset_and_transforms.rst:64
msgid ""
"The corresponding interface can be found under ``mindnlp.dataset`` . Here, "
"the ``Multi30k`` dataset is used as an example:"
msgstr ""
"可以在 ``mindnlp.dataset`` 下找到对应的数据集接口，并进行调用，这里以 "
"``Multi30k`` 数据集为例："

#: ../../quick_start/dataset_and_transforms.rst:71
#: ../../quick_start/dataset_and_transforms.rst:209
msgid ""
"Parameter list and returns can be known through the annotation, or the "
"corresponding docs on mindnlp `website <https://mindnlp.cqu.ai/en/latest/api/"
"dataset/machine_translation.html#module-mindnlp.dataset.machine_translation."
"multi30k>`__:"
msgstr ""
"通过注释或者网站对应的接口 `文档 <https://mindnlp.cqu.ai/zh_CN/latest/api/"
"dataset/machine_translation.html#module-mindnlp.dataset.machine_translation."
"multi30k>`__ 查看参数列表以及返回值等信息："

#: ../../quick_start/dataset_and_transforms.rst:75
#: ../../quick_start/dataset_and_transforms.rst:213
msgid "Parameters:"
msgstr "参数："

#: ../../quick_start/dataset_and_transforms.rst:77
msgid ""
"**root** (*str*) - Directory where the datasets are saved. Default:'~/."
"mindnlp'"
msgstr "**root** (*str*) - 存放数据集的目录。默认：\"~/.mindnlp\"。"

#: ../../quick_start/dataset_and_transforms.rst:79
msgid ""
"**split** (*str|Tuple[str]*) - Split or splits to be returned. Default:"
"('train', 'valid', 'test')."
msgstr ""
"**split** (*str|Tuple[str]*) - 要返回的数据集分块。默认：('train', 'valid', "
"'test')."

#: ../../quick_start/dataset_and_transforms.rst:81
msgid ""
"**language_pair** (*Tuple[str]*) - Tuple containing src and tgt language. "
"Default: ('de', 'en')."
msgstr ""
"**language_pair** (*Tuple[str]*) - 包含源语言和目标语言的元组。默认：('de', "
"'en')."

#: ../../quick_start/dataset_and_transforms.rst:83
msgid ""
"**proxies** (*dict*) - a dict to identify proxies,for example: {“https”: "
"“https://127.0.0.1:7890”}."
msgstr ""
"**proxies** (*dict*) - 定义代理的字典，例如：{\"https\": "
"\"https://127.0.0.1:7890\"}."

#: ../../quick_start/dataset_and_transforms.rst:86
#: ../../quick_start/dataset_and_transforms.rst:226
msgid "Returns:"
msgstr "返回："

#: ../../quick_start/dataset_and_transforms.rst:88
msgid ""
"**datasets_list** (list) -A list of loaded datasets. If only one type of "
"dataset is specified,such as 'trian', this dataset is returned instead of a "
"list of datasets."
msgstr ""
"**datasets_list** (list) - 加载完成的数据集分块列表。如果只加载了一个数据集分"
"块， 如：'trian'，那么就只返回这个数据集分块，而不是一个列表。"

#: ../../quick_start/dataset_and_transforms.rst:92
msgid "For convenience, we use default parameters except for the first one:"
msgstr "方便起见，除了第一个参数，其他使用默认参数："

#: ../../quick_start/dataset_and_transforms.rst:98
msgid ""
"Doubtlessly, if you just want to pick the train dataset, you only need to "
"modify the parameters below:"
msgstr "当然，如果想只取训练集，只需要修改参数："

#: ../../quick_start/dataset_and_transforms.rst:106
msgid "Method 2: Load by unified interface"
msgstr "方法2：通过统一接口加载"

#: ../../quick_start/dataset_and_transforms.rst:108
msgid ""
"Also, we can load dataset by a unified interface - ``load()`` . The first "
"parameter is a string to specify a dataset:"
msgstr ""
"通过一个统一的 ``load`` 接口进行加载，第一个参数为数据集的名称字符串，用以指"
"定数据集："

#: ../../quick_start/dataset_and_transforms.rst:116
msgid ""
"The other parameter can be added sequentially according to the interface:"
msgstr "其他参数可以通过查询接口继续添加，如："

#: ../../quick_start/dataset_and_transforms.rst:124
msgid "Customizing Dataset"
msgstr "自定义数据集"

#: ../../quick_start/dataset_and_transforms.rst:126
msgid ""
"If you want to use customizd dataset, more information about customizing "
"dataset could be found on mindspore `website <https://www.mindspore.cn/"
"tutorials/zh-CN/r1.9/beginner/dataset."
"html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86>`__."
msgstr ""
"如果想要自定义数据集，请查看mindspore官网上的 `数据集自定义教程 <https://www."
"mindspore.cn/tutorials/zh-CN/r1.9/beginner/dataset."
"html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86>`__ 。"

#: ../../quick_start/dataset_and_transforms.rst:131
msgid "Dataset Iteration"
msgstr "数据集迭代"

#: ../../quick_start/dataset_and_transforms.rst:133
msgid ""
"There are usually multiple columns in a dataset, and you can query the "
"column names using the ``get_col_names()`` interface:"
msgstr "数据集中一般有多列，可以使用 ``get_col_names()`` 接口查看列名："

#: ../../quick_start/dataset_and_transforms.rst:144
msgid ""
"After the dataset is loaded, the data is obtained iteratively and then sent "
"to the neural network for training. We can use ``create_tuple_iterator()`` "
"or ``create_dict_iterator()`` ​ interface to create an iterater for data "
"access. Combining the column names interface above:"
msgstr ""
"数据集加载后，一般以迭代方式获取数据，然后送入神经网络中进行训练。我们可以用 "
"``create_tuple_iterator`` 或 ``create_dict_iterator`` 接口创建数据迭代器，迭"
"代访问数据。结合上面的列名接口："

#: ../../quick_start/dataset_and_transforms.rst:163
msgid "Data Transforms"
msgstr "数据集变换处理"

#: ../../quick_start/dataset_and_transforms.rst:166
msgid "Common Operation"
msgstr "数据集常用操作"

#: ../../quick_start/dataset_and_transforms.rst:168
msgid ""
"The most important operation in data transformation processing is the "
"``map`` operation. ``map`` can add a data transform to a specified column in "
"a dataset, make it apply to each element of the column data, and then return "
"the dataset after transformation. ``BasicTokenizer()`` is used here for word "
"segmentation of two columns of the dataset, and ``from_dataset`` is used to "
"generate the vocab:"
msgstr ""
"数据集变换处理中最重要的操作是 ``map`` 操作，可以针对数据集指定列（column）添"
"加数据变换（Transforms），将数据变换应用于该列数据的每个元素，并返回包含变换"
"后元素的新数据集。这里使用 ``BasicTokenizer`` 对数据集的两列进行分词，并使用 "
"``from_dataset`` 生成词表："

#: ../../quick_start/dataset_and_transforms.rst:189
msgid "Data Preprocessing in mindnlp"
msgstr "mindnlp中的数据预处理"

#: ../../quick_start/dataset_and_transforms.rst:191
msgid ""
"There are different processes for different data sets in different domains. "
"In mindnlp, specific processing functions are provided to help us process "
"data quickly. Similarly, two ways can be used to process data. Using the "
"``Multi30k`` dataset as an example:"
msgstr ""
"对于不同领域中的不同数据集，有不同的处理流程，mindnlp提供了数据集的特定处理函"
"数帮助我们快速处理数据。和前面的加载方法一样，这里同样有两种方法调用该处理函"
"数。以 ``Multi30k`` 数据集为例："

#: ../../quick_start/dataset_and_transforms.rst:197
msgid "Method 1: Process by corresponding interface"
msgstr "方法1：通过对应接口处理"

#: ../../quick_start/dataset_and_transforms.rst:199
msgid ""
"The corresponding interface can be found under ``mindnlp.dataset`` , the "
"name of which begins with dataset's name, the underline and ``Process`` "
"following. The ``vocab`` in the code was generated above:"
msgstr ""
"可以在 ``mindnlp.dataset`` 下找到对应数据集接口，名称为数据集名称加下划线以"
"及 ``Process`` ，其中的 ``vocab`` 为如上生成的词表："

#: ../../quick_start/dataset_and_transforms.rst:215
msgid "**dataset** ( *GeneratorDataset* ) - Multi30k dataset."
msgstr "**dataset** (*GeneratorDataset*) - Multi30k数据集。"

#: ../../quick_start/dataset_and_transforms.rst:216
msgid ""
"**vocab** ( *Vocab* ) - vocabulary object, used to store the mapping of "
"token and index."
msgstr ""
"**vocab** (*Vocab*) - 词表对象，用于存储分词和索引的映射。默认为空。如果为"
"空，一个新的词表对象将会被创建。"

#: ../../quick_start/dataset_and_transforms.rst:218
msgid ""
"**batch_size** ( *int* ) - The number of rows each batch is created with. "
"Default: 64."
msgstr ""
"**batch_size** (*int*) - 指定每个批处理数据包含的数据条目。默认值：64。"

#: ../../quick_start/dataset_and_transforms.rst:220
msgid "**max_len** ( *int* ) - The max length of the sentence. Default: 500."
msgstr "**max_len** (*int*) - 句子的最大长度。默认值：500。"

#: ../../quick_start/dataset_and_transforms.rst:222
msgid ""
"**drop_remainder**  ( *bool* ) - When the last batch of data contains a data "
"entry smaller than batch_size, whether to discard the batch and not pass it "
"to the next operation. Default: False."
msgstr ""
"**drop_remainder** (*bool*) - 当最后一批数据包含的数据条目小于batch_size时，"
"是否丢弃该批次，而不将其传递到下一个操作。默认值：False，不丢弃。"

#: ../../quick_start/dataset_and_transforms.rst:228
msgid "**dataset** (MapDataset) - dataset after transforms."
msgstr "**dataset** (MapDataset) - 预处理操作后返回的数据集。"

#: ../../quick_start/dataset_and_transforms.rst:231
msgid "Method 2: Process by unified interface"
msgstr "方法2：通过统一接口"

#: ../../quick_start/dataset_and_transforms.rst:238
msgid ""
"For complete code, please check out the the github `repository <https://"
"github.com/mindspore-lab/mindnlp/blob/master/examples/machine_translation."
"py>`__"
msgstr ""
"完整代码请查看github仓库 `示例 <https://github.com/mindspore-lab/mindnlp/"
"blob/master/examples/machine_translation.py>`__ "

#: ../../quick_start/dataset_and_transforms.rst:242
msgid "Customizing Preprocess"
msgstr "自定义的预处理"

#: ../../quick_start/dataset_and_transforms.rst:244
msgid ""
"If you want to preprocess dataset by yourself, please refer to more "
"operations on mindspore `website <https://www.mindspore.cn/tutorials/zh-CN/"
"r1.9/beginner/transforms.html>`__."
msgstr ""
"如果想自行处理数据集，更多的操作请看mindspore官网 `教学 <https://www."
"mindspore.cn/tutorials/zh-CN/r1.9/beginner/transforms.html>`__ "

#: ../../quick_start/first_model.rst:2
msgid "First Model"
msgstr "第一个模型"

#: ../../quick_start/first_model.rst:5
msgid "Overview"
msgstr "概述"

#: ../../quick_start/first_model.rst:7
msgid ""
"Sentiment classification is a classic task in natural language processing. "
"It is a typical classification problem to mine and analyze people's "
"sentiments expressed in the text, which is positive or negative. The "
"following uses MindNLP to implement an RNN-based sentimental classification "
"model to achieve the following effects:"
msgstr ""
"情感分类是自然语言处理中的经典任务，目标在于对给定文本中的情感色彩进行挖掘、"
"分析，是典型的分类问题。本节使用MindNLP实现一个基于RNN网络的情感分类模型，实"
"现如下的效果："

#: ../../quick_start/first_model.rst:24
msgid "Model Building"
msgstr "模型构建"

#: ../../quick_start/first_model.rst:26
msgid ""
"According to the task, the base module :py:class:`~mindnlp.abc.Seq2vecModel` "
"can be used to build the model. The function of module :py:class:`~mindnlp."
"abc.Seq2vecModel` is to extract semantic feature of the input sequential and "
"calculate to the result vector. It consists of two modules, ``encoder`` and "
"``head``, where ``encoder`` mapping the input sentence into semantic vector "
"and ``head`` performing further calculation on ``encoder`` output to get the "
"final result."
msgstr ""
"根据任务的模型架构，使用 :py:class:`~mindnlp.abc.Seq2vecModel` 进行模型构建。"
"模块 :py:class:`~mindnlp.abc.Seq2vecModel` 的功能是提取输入序列数据的语义特征"
"并计算得到结果向量。这一模块由 ``encoder`` 和 ``head`` 两部分组成，其中 "
"``encoder`` 将输入句子映射为语义向量，而 ``head`` 对 ``encoder`` 的输出进行进"
"一步计算得到最终的结果。"

#: ../../quick_start/first_model.rst:53
msgid "Model Instantiation"
msgstr "模型实例化"

#: ../../quick_start/first_model.rst:55
msgid ""
"Two modules ``encoder`` and ``head`` are initialized separately, passing as "
"arguments into model. We use :py:class:`~mindnlp.modules.RNNEncoder` "
"provided by MindNLP as the model's ``encoder``, and use customized modules "
"as the model's ``head``."
msgstr ""
"分别将 ``encoder`` 和 ``head`` 两个模块分别初始化，并作为参数传入模型。我们使"
"用MindNLP提供的 :py:class:`~mindnlp.modules.RNNEncoder` 作为模型的 "
"``encoder`` ，并使用自定义的模块作为模型的 ``head`` 。"

#: ../../quick_start/modules.rst:2
msgid "Modules"
msgstr "组件"

#: ../../quick_start/modules.rst:4
msgid ""
":py:class:`~mindnlp.modules` is used to build neural network models, which "
"can be used with `MindSpore`. :py:class:`~mindnlp.modules` can be classified "
"into three functional modules: `Embedding`, `Encoder-Decoder` and "
"`Attention`. We will introduce the three function in the following three "
"sections."
msgstr ""
":py:class:`~mindnlp.modules` 用于构建神经网络模型，可以和 `MindSpore` 一起使"
"用。 :py:class:`~mindnlp.modules` 具有三大功能模块：`Embedding`, `Encoder-"
"Decoder` 和 `Attention` 。下面我们会分三节分别介绍这三大功能。"

#: ../../quick_start/modules.rst:10
msgid "Embedding"
msgstr ""

#: ../../quick_start/modules.rst:12
msgid ""
"embedding is essentially a word embedding technique, which can represent a "
"character or word as a low-dimensional vector. mindnlp provides a quick and "
"easy way to construct embeddings through pre-trained glove,fasttext,word2vec "
"word vectors. You can also create your own custom embeddings."
msgstr ""
"embedding本质上是一种词嵌入技术,能够将一个单词或短语表示为低维向量.mindnlp提"
"供了一个快速通过预训练glove,fasttext,word2vec词向量简单构造embedding的方法.你"
"也可以创建自己的embedding."

#: ../../quick_start/modules.rst:18
msgid ""
"Next we demonstrate how to quickly construct an embedding using glove word "
"vectors via MindNLP."
msgstr "下面将演示如何使用glove预训练词向量来通过MindNLP快速构造embedding."

#: ../../quick_start/modules.rst:40
msgid "After creating the embedding, we will use it for lookup next:"
msgstr "在创建embedding后,我们将使用它进行lookup:"

#: ../../quick_start/modules.rst:50
msgid ""
"You can get more information about the embedding API from :doc:`MindNLP."
"modules.embeddings <../api/modules/embeddings>`."
msgstr ""
"你可以从 :doc:`MindNLP.modules.embeddings <../api/modules/embeddings>`.得到更"
"多有关embedding API的信息."

#: ../../quick_start/modules.rst:54
msgid "Encoder-Decoder"
msgstr ""

#: ../../quick_start/modules.rst:56
msgid ""
"Encoder-Decoder is a model framework, which is a general term for a class of "
"algorithms. Various algorithms can be used in this framework to solve "
"different tasks. Encoder converts the input sequence into a sentiment "
"vector, and decoder generates the target translation based on the output of "
"the encoder."
msgstr ""
"Encoder-Decoder是一个模型架构，是一类算法统称。在这个框架下可以使用不同的算法"
"来解决不同的人物。Encoder将输入序列转化为语义向量，Decoder根据Encoder的输出生"
"成目标译文。"

#: ../../quick_start/modules.rst:61
msgid ""
"We can use encoder and decoder provided by MindNLP to construct model as the "
"following example of a machine translation model. More information about "
"this model are shown in :doc:`Machine Translation Example <../examples/"
"machine_translation>` ."
msgstr ""
"我们可以使用MindNLP中提供的的Encoder、Decoder模块来构建网络，如下面机器翻译模"
"型的示例所示。关于此模型的更多信息可查看 :doc:`机器翻译 <../examples/"
"machine_translation>` 。"

#: ../../quick_start/modules.rst:112
msgid ""
"The Encoder-Decoder modules included in MindNLP are shown in the following "
"table. You can click on the name to see the detailed API, or learn about "
"them through :doc:`MindNLP.modules.encoder <../api/modules/encoder>` and :"
"doc:`MindNLP.modules.decoder <../api/modules/decoder>` ."
msgstr ""
"MindNLP中包含的Encoder-Decoder模块如下表所示。您可以点击具体的名称查看详细的"
"API，也可以通过 :doc:`MindNLP.modules.encoder <../api/modules/encoder>` 和 :"
"doc:`MindNLP.modules.decoder <../api/modules/decoder>` 进行了解。"

#: ../../quick_start/modules.rst:118
msgid "Name"
msgstr "名称"

#: ../../quick_start/modules.rst:118
msgid "Introduction"
msgstr "介绍"

#: ../../quick_start/modules.rst:120
msgid ":class:`~mindnlp.modules.encoder.cnn_encoder.CNNEncoder`"
msgstr ""

#: ../../quick_start/modules.rst:120
msgid "Convolutional encoder consisting of len(convolutions) layers"
msgstr "由传入参数convolutions组成的卷积编码器"

#: ../../quick_start/modules.rst:124
msgid ":class:`~mindnlp.modules.encoder.rnn_encoder.RNNEncoder`"
msgstr ""

#: ../../quick_start/modules.rst:124
msgid "Stacked Elman RNN Encoder"
msgstr "循环神经网络（RNN）编码器"

#: ../../quick_start/modules.rst:126
msgid ":class:`~mindnlp.modules.decoder.rnn_decoder.RNNDecoder`"
msgstr ""

#: ../../quick_start/modules.rst:126
msgid "Stacked Elman RNN Decoder"
msgstr "循环神经网络（RNN）解码器"

#: ../../quick_start/modules.rst:131
msgid "Attention"
msgstr ""

#: ../../quick_start/modules.rst:133
msgid ""
"Attention is a simulation of the attention mechanism of the human brain. "
"When people see something, they tend to focus on important information and "
"ignore other information. Attention in natural language processing is to "
"assign attention weights to text, and the essence of Attention is to change "
"from focusing on all to focusing. In MindNLP, we provide various modules for "
"attention mechanisms, so you can use them quickly."
msgstr ""
"注意力是对人脑注意力机制的模拟。"
"当人们看到一些东西时，他们往往会把注意力集中在重要的信息和"
"忽略其他信息。在自然语言处理中，注意力是为了"
"对文本分配模型注意力的权重，而注意力的本质是"
"就是要从关注所有变为更好地关注局部。在MindNLP中，我们提供各种模块用于"
"注意力机制，可以让您更快的使用它"

#: ../../quick_start/modules.rst:140
msgid ""
"Next we will demonstrate how to build a multi-headed attention module via "
"MindNLP."
msgstr ""
"接下来我们将演示如何通过MindNLP"
"建立一个多头的注意力模块"

#: ../../quick_start/modules.rst:183
msgid ""
"Of course, you can also use the most basic scaled dot-product attention "
"attention to build the module:"
msgstr ""
"当然，你也可以使用最基本的缩放点积注意机制来构建模块："

#: ../../quick_start/modules.rst:200
msgid ""
"Currently mindnlp has implemented 8 attention mechanisms. You can get more "
"information about the attention API from :doc:`MindNLP.modules.attentions "
"<../api/modules/attentions>` ."
msgstr ""
"目前，MindNlp已经实现了8种注意力机制。"
"关于注意力机制更详细的实现和信息您可以查看我们的文档"
" :doc:`MindNLP.modules.attentions <../api/modules/attentions>` ."

#: ../../quick_start/train_and_eval.rst:2
msgid "Train and Eval"
msgstr "训练与评估"

#: ../../quick_start/train_and_eval.rst:4
msgid ""
"We use the task of sentiment analysis to give a detailed introduction. And "
"we employ :py:class:`~mindnlp.engine.trainer.Trainer` for a fast training "
"and evaluation."
msgstr ""
"我们根据情感分析任务来进行详细的介绍，使用 :py:class:`~mindnlp.engine."
"trainer.Trainer` 来进行快速训练和评估。"

#: ../../quick_start/train_and_eval.rst:10
msgid "Load and Process Data"
msgstr "加载和处理数据"

#: ../../quick_start/train_and_eval.rst:13
msgid "Load Data"
msgstr "加载数据"

#: ../../quick_start/train_and_eval.rst:15
msgid ""
"We can call the function ``load()`` from :py:class:`~mindnlp.dataset` to "
"load the IMDB dataset. And then the method will return the training set and "
"the testing set of the IMDB dataset."
msgstr ""
"我们可以调用来自 :py:class:`~mindnlp.dataset` 模块的函数 ``load()`` 来加载"
"IMDB数据集。该函数会返回IMDB数据集的训练集和测试集。"

#: ../../quick_start/train_and_eval.rst:19
msgid "The code of loading data is as follows:"
msgstr "加载数据的代码如下所示："

#: ../../quick_start/train_and_eval.rst:28
msgid "Process and Split Data"
msgstr "处理和划分数据"

#: ../../quick_start/train_and_eval.rst:30
msgid ""
"First we obtain the embeddings and the vocabulary, by calling the function "
"``from_pretrained()`` from :py:class:`~mindnlp.modules.embeddings."
"glove_embedding.Glove`:"
msgstr ""
"首先我们通过调用来自 :py:class:`~mindnlp.modules.embeddings.glove_embedding."
"Glove` 的函数 ``from_pretrained()`` ，获取嵌入和词汇表："

#: ../../quick_start/train_and_eval.rst:40
msgid ""
"And then we initialize the tokenizer by instantiating the class :py:class:"
"`~mindnlp.dataset.transforms.tokenizers.BasicTokenizer`:"
msgstr ""
"然后我们通过实例化类 :py:class:`~mindnlp.dataset.transforms.tokenizers."
"BasicTokenizer` 来初始化分词器："

#: ../../quick_start/train_and_eval.rst:49
msgid ""
"Next, we apply the method ``process()`` to get the processed training set, "
"by passing the obtained training set, tokenizer, vocabulary and so on into "
"this method:"
msgstr ""
"接着，我们将获取到的训练集、分词器和词汇表等传入方法 ``process()`` ，应用该方"
"法获取处理过的训练集："

#: ../../quick_start/train_and_eval.rst:60
msgid ""
"Finally, we employ the method ``split()`` to split the processed training "
"set, thus getting a new training set and a validation set:"
msgstr ""
"最后，我们使用方法 ``split()`` 来划分处理后的训练集，从而获取新的训练集和验证"
"集："

#: ../../quick_start/train_and_eval.rst:68
msgid "Define and Train Model"
msgstr "定义和训练模型"

#: ../../quick_start/train_and_eval.rst:71
msgid "Define and Initialize Network"
msgstr "定义和初始化网络"

#: ../../quick_start/train_and_eval.rst:73
msgid ""
"We introduce the pre-defined network layers from MindSpore and MindNLP to "
"construct our network."
msgstr "我们引入了MindSpore和MindNLP预定义好的网络层来构建我们的网络。"

#: ../../quick_start/train_and_eval.rst:76
msgid ""
"Use ``mindspore.nn.LSTM``, ``mindspore.nn.Dense``, ``mindspore.nn.Sigmoid``, "
"``mindspore.nn.Dropout`` of MindSpore, and :py:class:`~mindnlp.abc."
"Seq2vecModel`, :py:class:`~mindnlp.modules.encoder.rnn_encoder.RNNEncoder` "
"of MindNLP to construct our model. And apply ``mindspore.common.initializer."
"Uniform`` and ``mindspore.common.initializer.HeUniform`` of MindSpore to "
"initialize the weight and bias of the network we construct."
msgstr ""
"使用MindSpore的 ``mindspore.nn.LSTM`` ， ``mindspore.nn.Dense`` ， "
"``mindspore.nn.Sigmoid`` ， ``mindspore.nn.Dropout`` ，和MindNLP的 :py:class:"
"`~mindnlp.abc.Seq2vecModel`， :py:class:`~mindnlp.modules.encoder."
"rnn_encoder.RNNEncoder` 来构建我们的模型。并应用MindSpore的 ``mindspore."
"common.initializer.Uniform`` 和 ``mindspore.common.initializer.HeUniform`` 来"
"初始化我们构建的网络的权重和偏差。"

#: ../../quick_start/train_and_eval.rst:86
msgid "The code of defining and initializing the network is as follows:"
msgstr "定义和初始化网络的代码如下所示："

#: ../../quick_start/train_and_eval.rst:144
msgid "Define Loss Function and Optimizer"
msgstr "定义损失函数和优化器"

#: ../../quick_start/train_and_eval.rst:146
msgid ""
"A loss function is needed when we train the model. We use ``mindspore.nn."
"BCELoss`` provided by MindSpore to define a loss function:"
msgstr ""
"我们训练模型时需要损失函数，我们使用MindSpore提供的 ``mindspore.nn.BCELoss`` "
"来定义一个损失函数："

#: ../../quick_start/train_and_eval.rst:154
msgid ""
"After that, define the optimizer required for running the model by calling "
"``mindspore.nn.Adam`` and passing the trainable parameters of the model into "
"it:"
msgstr ""
"然后，调用 ``mindspore.nn.Adam`` ，并传入模型的可训练参数，从而定义运行模型所"
"需要的优化器："

#: ../../quick_start/train_and_eval.rst:163
msgid "Define Callbacks"
msgstr "定义回调函数"

#: ../../quick_start/train_and_eval.rst:165
msgid ""
"Defining callbacks plays an important role in training models with MindNLP. "
"It helps to add some extra operations to the training process."
msgstr ""
"借助MindNLP进行模型训练时，定义回调函数非常重要。它帮助在训练过程中添加一些额"
"外的操作。"

#: ../../quick_start/train_and_eval.rst:168
msgid ""
"For example, we can add :py:class:`~mindnlp.engine.callbacks."
"best_model_callback.BestModelCallback` for saving and loading the best "
"model. Or we can use :py:class:`~mindnlp.engine.callbacks."
"checkpoint_callback.CheckpointCallback` for saving the checkpoint. There are "
"also other callbacks for early stop and timing."
msgstr ""
"例如，我们可以添加 :py:class:`~mindnlp.engine.callbacks.best_model_callback."
"BestModelCallback` 用于保存和加载最好的模型。或者我们能够使用 :py:class:"
"`~mindnlp.engine.callbacks.checkpoint_callback.CheckpointCallback` 来保存"
"checkpoint。除此之外，还有能用于早停和计时的回调函数。"

#: ../../quick_start/train_and_eval.rst:175
msgid ""
"When customizing the callbacks we need, we could first initialize the "
"corresponding classes of callbacks, and then declare a callback list of the "
"callbacks we initialized before. Just like:"
msgstr ""
"当定义我们需要的回调函数时，我们首先需要初始化回调函数对应的类，然后声明一个"
"由我们事先初始化的回调函数组成的列表，正如："

#: ../../quick_start/train_and_eval.rst:192
msgid "Define Metrics"
msgstr "定义评价指标"

#: ../../quick_start/train_and_eval.rst:194
msgid ""
"It is necessary to evaluate the model using one or more metrics. We choose :"
"py:class:`~mindnlp.engine.metrics.accuracy.Accuracy` to be the metric of the "
"model:"
msgstr ""
"使用一个或多个评价指标来评估模型是有必要的。我们选择 :py:class:`~mindnlp."
"engine.metrics.accuracy.Accuracy` 作为模型的评价指标："

#: ../../quick_start/train_and_eval.rst:205
msgid "Train and Evaluate Model"
msgstr "训练与评估模型"

#: ../../quick_start/train_and_eval.rst:207
msgid ""
"After defining the network, the loss function, the optimizer, the callbacks "
"and the metrics, we employ :py:class:`~mindnlp.engine.trainer.Trainer` to "
"train and evaluate the model defined above."
msgstr ""
"定义好网络、损失函数、优化器、回调函数和评价指标后，我们应用 :py:class:"
"`~mindnlp.engine.trainer.Trainer` 来训练和评估前文定义好的模型。"

#: ../../quick_start/train_and_eval.rst:211
msgid ""
"More specifically, when we train the model, we should pass these parameters "
"into :py:class:`~mindnlp.engine.trainer.Trainer`:"
msgstr ""
"具体地说，当我们训练模型时，我们应该将这些参数传入 :py:class:`~mindnlp."
"engine.trainer.Trainer` ："

#: ../../quick_start/train_and_eval.rst:214
msgid "``network``: the network to be trained."
msgstr "``network``：训练的网络。"

#: ../../quick_start/train_and_eval.rst:215
msgid "``train_dataset``: the dataset for training the model."
msgstr "``train_dataset``：用于训练模型的数据集。"

#: ../../quick_start/train_and_eval.rst:216
msgid "``eval_dataset``: the dataset for evaluating the model."
msgstr "``eval_dataset``：用于评估模型的数据集。"

#: ../../quick_start/train_and_eval.rst:217
msgid "``metrics``: the metrics used for model evaluation."
msgstr "``metrics``：用于评估模型的评价指标。"

#: ../../quick_start/train_and_eval.rst:218
msgid "``epochs``: the total number of training iterations."
msgstr "``epochs``：训练数据的总迭代次数。"

#: ../../quick_start/train_and_eval.rst:219
msgid "``loss_fn``: the loss function."
msgstr "``loss_fn``：损失函数。"

#: ../../quick_start/train_and_eval.rst:220
msgid "``optimizer``: the optimizer for updating the trainable parameters."
msgstr "``optimizer``：用于更新训练参数的优化器。"

#: ../../quick_start/train_and_eval.rst:221
msgid "``callbacks``: the additional operations executed when training."
msgstr "``callbacks``：训练时执行的额外操作。"

#: ../../quick_start/train_and_eval.rst:223
msgid "The example code of training and evaluating the model is as follows:"
msgstr "训练和评估模型的示例代码："

#: ../../quick_start/use_callback.rst:2
msgid "Use callback"
msgstr "使用Callback自定义训练过程"

#: ../../quick_start/use_callback.rst:4
msgid ""
"Callback is a module closely related to Trainer. Using callback in Trainer "
"can realize timing, early stop, saving checkpoint and other operations "
"required in model training. At the same time, MindNLP also supports custom "
"callback function."
msgstr ""
"Callback是与训练器紧密相关的模块，在Trainer中使用回调函数能够实现计时、早停、"
"保存checkpoint等在模型训练过程中所需要的额外操作。同时，MindNLP还支持自定义"
"callabck。"

#: ../../quick_start/use_callback.rst:11
msgid "Use Callback in Engine"
msgstr "在Engine中使用Callback"

#: ../../quick_start/use_callback.rst:12
msgid ""
"Callback needs to be used on the premise that trainer or evaluator has been "
"defined. MindNLP supports passing in two types of parameters to the enigne: "
"Callback and Callback List. Engine will automatically execute the operations "
"specified by these callbacks."
msgstr ""
"Callback需要在已经定义训练器Trainer或评测器Evaluator的前提下使用。MindNLP同时"
"支持向Engine传入两种类型的callback参数：Callback类型和list[Callback]类型。"
"Engine会自动执行所传入的callback对应的功能。"

#: ../../quick_start/use_callback.rst:17
msgid "The code of using engine is as follows:"
msgstr "在Engine中使用Callback的代码如下所示："

#: ../../quick_start/use_callback.rst:70
msgid "Callbacks in MindNLP"
msgstr "MindNLP中的Callback"

#: ../../quick_start/use_callback.rst:71
msgid ""
"MindNLP provides many common callbacks, such as ``TimerCallback``, "
"``EarlyStopCallback``, ``BestModelCallback`` and so on. For specific "
"Callback, please refer to :py:class:`~mindnlp.engine.callbacks`"
msgstr ""
"MindNLP提供几种常见的Callback，包括TimerCallback，EarlyStopCallback，"
"BestModelCallback等。以上callback的详细内容，可以参考mindnlp.engine."
"callbacks。"

#: ../../quick_start/use_callback.rst:88
msgid "Custom Callback"
msgstr "自定义Callback"

#: ../../quick_start/use_callback.rst:89
msgid ""
"Here we take a simple Callback as an example, its function is to print the "
"average training loss of each Epoch."
msgstr ""
"这里我们用一个简单的Callback作为例子，它的功能是在模型训练中每个Epoch结束时，"
"打印出当前的loss均值。"

#: ../../quick_start/use_callback.rst:93
msgid "Create Callback"
msgstr "创建回调函数"

#: ../../quick_start/use_callback.rst:94
msgid ""
"To customize Callback, we need to implement a class that inherits from "
"Callback. Here we define MyCallBack, which inherits from :py:class:`~mindnlp."
"abc.callback`."
msgstr ""
"若要自定义Callback，我们需要在继承Callback基类的基础上实现一个类。这里我们定"
"义这个类为MyCallback，继承自mindnlp.abc.callback。"

#: ../../quick_start/use_callback.rst:99
msgid "Specifies the phase of calling the Callback"
msgstr "指定Callback调用的阶段"

#: ../../quick_start/use_callback.rst:100
msgid ""
"All class methods in Callback will be called at a specific stage during "
"Trainer's training. For example, train_begin() will be called at the "
"beginning of training, and epoch_end() will be called at the end of each "
"epoch. For specific class methods, see the ``Callback`` documentation. Here, "
"MyCallBack calls epoch_end() at the end of each epoch, output the loss of "
"the current epoch."
msgstr ""
"Callback中所有的类方法都会在Trainer的训练中在特定的阶段调用。如train_begin()"
"会在训练开始时被调用，epoch_end()会在每个epoch结束时调用。具体有哪些类方法，"
"参见Callback文档。这里，MyCallback在每个epoch结束时调用epoch_end()，输出当前"
"epoch结束时的loss均值。"

#: ../../quick_start/use_callback.rst:109
msgid "Access the internal information of Engine"
msgstr "访问Engine内部信息"

#: ../../quick_start/use_callback.rst:110
msgid ""
"All methods in Callback contain parameter ``run_context`` that can access "
"the internal information of the Engine, such as current numbers of steps, "
"current numbers of epochs, loss value, etc. Here, MyCallBack needs to get "
"the current number of epochs of the Trainer and the average loss value after "
"each epoch."
msgstr ""
"Callback中所有的类方法都包含run_context参数用来访问Engine内部训练信息。如当前"
"训练的step数目，当前训练的epoch数目，loss值等。这里，MyCallback需要获得"
"Trainer当前的epoch数目和每个epoch结束后的loss均值。"

#: ../../quick_start/use_metrics.rst:2
msgid "Use Metrics"
msgstr "使用Metrics评估模型"

#: ../../quick_start/use_metrics.rst:4
msgid ""
"There are a variety of :py:class:`~mindnlp.abc.Metric` in MindNLP for model "
"evaluation: :py:class:`~mindnlp.engine.metrics.accuracy.Accuracy`, :py:class:"
"`~mindnlp.engine.metrics.bleu.BleuScore`, :py:class:`~mindnlp.engine.metrics."
"confusion_matrix.ConfusionMatrix`, :py:class:`~mindnlp.engine.metrics."
"distinct.Distinct`, :py:class:`~mindnlp.engine.metrics.em_score.EmScore`, :"
"py:class:`~mindnlp.engine.metrics.f1.F1Score`, :py:class:`~mindnlp.engine."
"metrics.matthews.MatthewsCorrelation`, :py:class:`~mindnlp.engine.metrics."
"pearson.PearsonCorrelation`, :py:class:`~mindnlp.engine.metrics.perplexity."
"Perplexity`, :py:class:`~mindnlp.engine.metrics.precision.Precision`, :py:"
"class:`~mindnlp.engine.metrics.recall.Recall`, :py:class:`~mindnlp.engine."
"metrics.rouge.RougeL`, :py:class:`~mindnlp.engine.metrics.rouge.RougeN`, :py:"
"class:`~mindnlp.engine.metrics.spearman.SpearmanCorrelation`."
msgstr ""
"MindNLP中有很多 :py:class:`~mindnlp.abc.Metric` 可以用于模型评估： :py:class:"
"`~mindnlp.engine.metrics.accuracy.Accuracy` ， :py:class:`~mindnlp.engine."
"metrics.bleu.BleuScore`， :py:class:`~mindnlp.engine.metrics."
"confusion_matrix.ConfusionMatrix`， :py:class:`~mindnlp.engine.metrics."
"distinct.Distinct`， :py:class:`~mindnlp.engine.metrics.em_score.EmScore`， :"
"py:class:`~mindnlp.engine.metrics.f1.F1Score`， :py:class:`~mindnlp.engine."
"metrics.matthews.MatthewsCorrelation`， :py:class:`~mindnlp.engine.metrics."
"pearson.PearsonCorrelation`， :py:class:`~mindnlp.engine.metrics.perplexity."
"Perplexity`， :py:class:`~mindnlp.engine.metrics.precision.Precision`， :py:"
"class:`~mindnlp.engine.metrics.recall.Recall`， :py:class:`~mindnlp.engine."
"metrics.rouge.RougeL`， :py:class:`~mindnlp.engine.metrics.rouge.RougeN`， :"
"py:class:`~mindnlp.engine.metrics.spearman.SpearmanCorrelation`。"

#: ../../quick_start/use_metrics.rst:22
msgid ""
"We can use these pre-defined metrics directly, by instantiating some of the "
"classes and passing the instantiated objects into :py:class:`~mindnlp.engine."
"trainer.Trainer` as one of its parameters."
msgstr ""
"我们可以直接使用这些预定义好的评价指标，通过实例化一些相关类，并将实例化后的"
"对象送入 :py:class:`~mindnlp.engine.trainer.Trainer` 作为其参数之一。"

#: ../../quick_start/use_metrics.rst:27
msgid ""
"Taking the use of :py:class:`~mindnlp.engine.metrics.accuracy.Accuracy` as "
"an example, the code of using metrics for model training and evaluation is "
"as follows:"
msgstr ""
"以 :py:class:`~mindnlp.engine.metrics.accuracy.Accuracy` 的使用为例，使用评价"
"指标，进行模型训练和评估的代码如下所示："

#: ../../quick_start/use_metrics.rst:47
msgid "Define a New Metric"
msgstr "定义新的评价指标"

#: ../../quick_start/use_metrics.rst:49
msgid ""
"If the metric we need is not provided by MindNLP, it is still simple and "
"easy for us to define our own metric."
msgstr ""
"如果MindNLP没有提供我们需要的评价指标，我们也可以轻松定义自己的评价指标。"

#: ../../quick_start/use_metrics.rst:52
msgid ""
"All of the classes of metrics defined in MindNLP are inherited from the base "
"class :py:class:`~mindnlp.abc.Metric`. When defining our own metric class, "
"it is also necessary to extend :py:class:`~mindnlp.abc.Metric` and rewrite "
"the functions of it:"
msgstr ""
"MindNLP定义的所有评价指标类都继承自基类 :py:class:`~mindnlp.abc.Metric` 。定"
"义我们自己的评价指标类时，也需要继承 :py:class:`~mindnlp.abc.Metric` ，并重写"
"该类的函数："

#: ../../quick_start/use_metrics.rst:59
msgid "``__init__()``: initializes the metric."
msgstr "``__init__()``：初始化评价指标。"

#: ../../quick_start/use_metrics.rst:60
msgid "``clear()``: clears the internal evaluation results."
msgstr "``clear()``：清空中间评估结果。"

#: ../../quick_start/use_metrics.rst:61
msgid "``eval()``: computes and returns the value of the metric."
msgstr "``eval()``：计算并返回评价指标值。"

#: ../../quick_start/use_metrics.rst:62
msgid "``update(*inputs)``: updates the local variables."
msgstr "``update(*inputs)``：更新局部变量。"

#: ../../quick_start/use_metrics.rst:63
msgid "``get_metric_name()``: returns the name of the metric."
msgstr "``get_metric_name()``：返回评价指标名称。"

#: ../../quick_start/use_metrics.rst:65
msgid ""
"After finishing those operations, the steps to train and evaluate models "
"using self-defined metrics are the same as mentioned above."
msgstr ""
"完成上述操作后，要使用自定义的评价指标来训练和评估模型，后续操作与前文一致。"
